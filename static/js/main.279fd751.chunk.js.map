{"version":3,"sources":["getWeb3.js","NavBar.js","NameForm.js","LoadingSpinner.js","App.js","reportWebVitals.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","NavBar","account","network","connect","className","onClick","NameForm","processSubmit","useState","name","setName","onSubmit","evt","preventDefault","type","value","onChange","e","target","LoadingSpinner","visible","Spinner","animation","role","App","refresh","loading","setLoading","isElecting","setIsElecting","setAccount","setNetwork","currentContract","setCurrentContract","currentBestCrypto","setCurrentBestCrypto","balance","setBalance","useEffect","loadWeb3","loadBlockchainData","url","location","href","eth","getAccounts","accounts","length","net","getId","networkId","c","Contract","bcvContract","abi","alert","updateCurrentBestCryptoName","methods","getBestCryptoName","call","getBalance","newBalance","electNewCrypto","newName","Elect","send","from","on","electResult","align","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.279fd751.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React from \"react\";\r\n\r\nconst NavBar = ({ account, network, connect}) => {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-dark bg-dark shadow mb-5\">\r\n        <h1 className=\"navbar-brand my-auto\"> Best crypto </h1>\r\n        <ul className=\"navbar-nav\">\r\n          <li className=\"nav-item text-white\">\r\n\r\n            {network} -\r\n            {account != null ? (\r\n              account\r\n            ) : (\r\n              <button onClick={connect}> Connect Metamask </button>\r\n            )}{\" \"}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { useState } from \"react\";\r\n\r\nconst NameForm = ({ processSubmit }) => {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    processSubmit(name);\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        New best crypto Name:\r\n        <input\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </label>\r\n      <input type=\"submit\" value=\"Elect new best crypto\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NameForm;\r\n","import React from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nconst LoadingSpinner = (visible) => {\r\n  return (\r\n    <div>\r\n      {visible ? (\r\n        <Spinner animation=\"border\" role=\"status\">\r\n          <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport bcvContract from \"./contracts/bcv.json\";\nimport Web3 from \"web3\";\n\nimport getWeb3 from \"./getWeb3\";\nimport NavBar from \"./NavBar\";\nimport NameForm from \"./NameForm\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\n//init web3\n\nfunction App() {\n  const [refresh, setrefresh] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [isElecting, setIsElecting] = useState(false);\n\n  const [account, setAccount] = useState(\"\");\n  const [network, setNetwork] = useState(\"\");\n  const [currentContract, setCurrentContract] = useState();\n  const [currentBestCrypto, setCurrentBestCrypto] = useState(\n    \"Not loaded yet ... \"\n  );\n  const [balance, setBalance] = useState(\"?\");\n\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n    //esl\n  }, [refresh]);\n\n  const loadWeb3 = async () => {\n    const web3 = await getWeb3();\n    console.log(web3);\n  };\n\n  const loadBlockchainData = async () => {\n    console.log(\"loadBlockchainData\");\n    setLoading(true);\n    if (typeof window.ethereum == \"undefined\") {\n      return;\n    }\n    const web3 = new Web3(window.ethereum);\n\n    let url = window.location.href;\n    console.log(url);\n\n    const accounts = await web3.eth.getAccounts();\n    console.log(\"Got accounts\");\n    if (accounts.length === 0) {\n      setAccount(null);\n      return;\n    }\n    setAccount(accounts[0]);\n    const networkId = await web3.eth.net.getId();\n\n    console.log(account);\n    console.log(networkId);\n\n    //const networkData = bcvContract.networks[networkId];\n\n    // if(networkData) {\n\n    const c = new web3.eth.Contract(\n      bcvContract.abi,\n      \"0x722cF3Bc003f5B19e5a36dB1099B37399E4eD917\"\n    );\n\n    if (!c) {\n      alert(\"Couldn't load contract\");\n      return;\n    }\n    console.log(\"Contract\", c);\n    setCurrentContract(c);\n    console.log(currentContract);\n\n    if (networkId === 1666600000) {\n      setNetwork(\"Harmony Main Net\");\n    } else if (networkId === 1666700000) {\n      setNetwork(\"Harmony Test Net\");\n    } else if (networkId === 5777) {\n      setNetwork(\"Truffle Test Net\");\n    } else {\n      setNetwork(\"Unknown\");\n      window.alert(\"the contract not deployed to detected network.\" + networkId);\n    }\n    console.log(\"set loading to false\");\n    setLoading(false);\n  };\n\n  const updateCurrentBestCryptoName = async () => {\n    if (currentContract) {\n      const name = await currentContract.methods.getBestCryptoName().call();\n      setCurrentBestCrypto(name);\n      const newBalance = await currentContract.methods.getBalance().call();\n      console.log(newBalance);\n      setBalance(newBalance);\n      console.log(\"Loaded\", name);\n    } else {\n      console.log(\"Error no current contract\");\n    }\n  };\n\n  useEffect(() => {\n    updateCurrentBestCryptoName();\n  }, [currentContract]);\n\n  const electNewCrypto = async (newName) => {\n    console.log(\"update\");\n    setIsElecting(true);\n    if (currentContract) {\n      const electResult = await currentContract.methods\n        .Elect(newName)\n        .send({ from: account, value: 1 * 10 ** 18 })\n        //.send({ from: account })\n        .on(\"transactionhash\", () => {\n          console.log(\"Done update\");\n        });\n      console.log(\"done await update\", electResult);\n      updateCurrentBestCryptoName();\n    } else {\n      console.log(\"error current contract not there\");\n    }\n    setIsElecting(false);\n  };\n\n  return (\n    <div>\n      <NavBar\n        account={account}\n        network={network}\n        connect={loadBlockchainData}\n      />\n\n      {currentContract ? (\n        <div align=\"center\">\n          <h1>\n            The best crypto now is :\n            {loading ? <LoadingSpinner visible=\"true\" /> : currentBestCrypto}\n          </h1>\n          {isElecting ? (\n            <LoadingSpinner visible=\"true\" />\n          ) : (\n            <NameForm processSubmit={(name) => electNewCrypto(name)} />\n          )}\n        </div>\n      ) : (\n        <p> Please connect Metamask </p>\n      )}\n      <div align=\"center\">\n        <p/><p/>\n        <h3> Current smart contract balance {balance / 10 ** 18 } ONE </h3>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}